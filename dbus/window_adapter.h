
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__window_adapter_h__ADAPTOR_MARSHAL_H
#define __dbusxx__window_adapter_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace os {
namespace Compositor {

class Window_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Window_adaptor()
    : ::DBus::InterfaceAdaptor("org.os.Compositor.Window")
    {
        register_method(Window_adaptor, Apps, _Apps_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument Apps_args[] =
        {
            { "app_ids", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Window_adaptor_methods[] =
        {
            { "Apps", Apps_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Window_adaptor_signals[] =
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Window_adaptor_properties[] =
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Window_adaptor_interface =
        {
            "org.os.Compositor.Window",
            Window_adaptor_methods,
            Window_adaptor_signals,
            Window_adaptor_properties
        };
        return &Window_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > Apps() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Apps_stub(const ::DBus::CallMessage &call)
    {
        // ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = Apps();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } }
#endif //__dbusxx__window_adapter_h__ADAPTOR_MARSHAL_H
