
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__shortcut_adapter_h__ADAPTOR_MARSHAL_H
#define __dbusxx__shortcut_adapter_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace os {
namespace Compositor {

class Shortcut_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Shortcut_adaptor()
    : ::DBus::InterfaceAdaptor("org.os.Compositor.Shortcut")
    {
        register_method(Shortcut_adaptor, Register, _Register_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument Register_args[] =
        {
            { "key_code", "i", true },
            { "modifiers", "i", true },
            { "state", "i", true },
            { "id", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Shortcut_args[] =
        {
            { "id", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Shortcut_adaptor_methods[] =
        {
            { "Register", Register_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Shortcut_adaptor_signals[] =
        {
            { "Shortcut", Shortcut_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Shortcut_adaptor_properties[] =
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Shortcut_adaptor_interface =
        {
            "org.os.Compositor.Shortcut",
            Shortcut_adaptor_methods,
            Shortcut_adaptor_signals,
            Shortcut_adaptor_properties
        };
        return &Shortcut_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t Register(const int32_t& key_code, const int32_t& modifiers, const int32_t& state) = 0;

public:

    /* signal emitters for this interface
     */
    void Shortcut(const int32_t& arg1)
    {
        ::DBus::SignalMessage sig("Shortcut");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Register_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        int32_t argin3; ri >> argin3;
        int32_t argout1 = Register(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } }
#endif //__dbusxx__shortcut_adapter_h__ADAPTOR_MARSHAL_H
